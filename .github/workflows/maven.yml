name: Java CI with Maven

on:
  push:
    branches:
      - main
  pull_request:

  workflow_dispatch:

jobs:
  Linux-Build:
#    if: false
    strategy:
      fail-fast: true
      matrix:
        architecture:
          - name: x86_64
            linux_name: x86-64-linux-gnu
            exec_name: x86_64-linux-gnu
          - name: x86
            linux_name: i686-linux-gnu
            exec_name: i686-linux-gnu
          - name: aarch64
            linux_name: aarch64-linux-gnu
            exec_name: aarch64-linux-gnu
          - name: armv7
            linux_name: arm-linux-gnueabi
            exec_name: arm-linux-gnueabi
          - name: ppc64le
            linux_name: powerpc64le-linux-gnu
            exec_name: powerpc64le-linux-gnu
          - name: riscv64
            linux_name: riscv64-linux-gnu
            exec_name: riscv64-linux-gnu
          - name: s390x
            linux_name: s390x-linux-gnu
            exec_name: s390x-linux-gnu
        java_version: [ 8, 11, 17, 21 ]

    name: Linux-${{ matrix.architecture.name }}-Build-JDK${{ matrix.java_version }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ matrix.java_version }}
          architecture: 'x64'
          check-latest: true

      - name: Install GCC
        run: |
          sudo apt-get install -y gcc-${{ matrix.architecture.linux_name }} g++-${{ matrix.architecture.linux_name }}
          sudo update-alternatives --install /usr/bin/cc cc /usr/bin/${{ matrix.architecture.exec_name}}-gcc 200
          sudo update-alternatives --install /usr/bin/c++ c++ /usr/bin/${{ matrix.architecture.exec_name}}-g++ 200

      - name: Build
        run: mvn -B -V -ntp --file pom.xml -P linux-${{ matrix.architecture.name }} "-Dmaven.test.skip=true" clean package

      - name: Upload build
        uses: actions/upload-artifact@v4
        with:
          name: Linux-${{ matrix.architecture.name }}-Build-JDK${{ matrix.java_version }}
          path: .
          compression-level: 9

  Windows-Build:
    if: false
    strategy:
      fail-fast: true
      matrix:
        architecture:
          - name: x86_64
            msvc_code: x64
          - name: x86
            msvc_code: x64_x86
          - name: aarch64
            msvc_code: x64_arm64
          - name: armv7
            msvc_code: x64_arm
        java_version: [ 8, 11, 17, 21 ]

    name: Windows-${{ matrix.architecture.name }}-Build-JDK${{ matrix.java_version }}
    runs-on: windows-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ matrix.java_version }}
          architecture: 'x64'
          check-latest: true

      - name: Enable compiler
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: ${{ matrix.architecture.msvc_code }}

      - name: Build
        run: mvn -B -V -ntp --file pom.xml -P windows-${{ matrix.architecture.name }} "-Dmaven.test.skip=true" clean package

      - name: Upload build
        uses: actions/upload-artifact@v4
        with:
          name: Windows-${{ matrix.architecture.name }}-Build-JDK${{ matrix.java_version }}
          path: .
          compression-level: 9

  OSX-Build:
    if: false
    strategy:
      fail-fast: true
      matrix:
        architecture:
          - name: x86_64
          - name: aarch64
        java_version: [ 8, 11, 17, 21 ]

    name: OSX-${{ matrix.architecture.name }}-Build-JDK${{ matrix.java_version }}
    runs-on: macos-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ matrix.java_version }}
          architecture: 'x64'
          check-latest: true

      - name: Build
        run: mvn -B -V -ntp --file pom.xml -P osx-${{ matrix.architecture.name }} "-Dmaven.test.skip=true" clean package

      - name: Upload build
        uses: actions/upload-artifact@v4
        with:
          name: OSX-${{ matrix.architecture.name }}-Build-JDK${{ matrix.java_version }}
          path: .
          compression-level: 9

  Complete-Build:
    if: false
    strategy:
      fail-fast: true
      matrix:
        java_version: [ 8, 11, 17, 21 ]
    needs: [ Linux-Build, Windows-Build, OSX-Build ]

    name: Complete-Build-JDK${{ matrix.java_version }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ matrix.java_version }}
          architecture: 'x64'
          check-latest: true

      - name: Download builds
        uses: actions/download-artifact@v4
        with:
          pattern: "*-JDK${{ matrix.java_version }}"
          path: builds/
          merge-multiple: false

      - name: Copy builds
        shell: /usr/bin/bash -e {0}
        run: |
          OUT=$PWD
          rootPaths=($(find ./builds/*/natives/ -type d -name "target" | grep -oiP '(.*)\/([^-]*-[^-]*)-Build-JDK([0-9]*)(?=\/natives\/\2\/target)'))
          paths=($(find ./builds/*/natives/ -type d -name "target" | grep -oiP '(?:(.*)\/([^-]*-[^-]*)-Build-JDK([0-9]*)\/)natives\/\2\/target'))
          for i in "${!paths[@]}"; do
            rootPath="${rootPaths[$i]}"
            rootPathLen="${#rootPath}"
            path="${paths[$i]}"
            
            cd $rootPath
            path=.${path:rootPathLen:256}
            
            cp -r --parent $path $OUT
            cd $OUT
          done

      - name: Build
        run: mvn -B -V -ntp --file pom.xml -P release "-Dmaven.test.skip=false" package

      - name: Upload build
        uses: actions/upload-artifact@v4
        with:
          name: Complete-Build-JDK${{ matrix.java_version }}
          path: .
          compression-level: 9

  Linux-Test:
    strategy:
      fail-fast: false
      matrix:
        architecture:
          - name: x86_64
            java_distro: 'temurin'
            java_name: x64
            linux_name: amd64
            qemu_name: amd64
            docker_name: linux/amd64
          - name: x86
            java_distro: 'liberica'
            java_name: x86
            linux_name: i386
            qemu_name: i386
            docker_name: linux/i386
          - name: aarch64
            java_distro: 'temurin'
            java_name: aarch64
            linux_name: arm64
            qemu_name: aarch64
            docker_name: linux/aarch64
          - name: armv7
            java_distro: 'liberica'
            java_name: arm
            linux_name: armel
            qemu_name: arm
            docker_name: linux/arm/v7
          - name: ppc64le
            java_distro: 'temurin'
            java_name: ppc64le
            linux_name: ppc64el
            qemu_name: ppc64le
            docker_name: linux/ppc64le
          - name: riscv64
            java_distro: 'temurin'
            java_name: riscv64
            linux_name: riscv64
            qemu_name: riscv64
            docker_name: linux/riscv64
          - name: s390x
            java_distro: 'temurin'
            java_name: s390x
            linux_name: s390x
            qemu_name: s390x
            docker_name: linux/s390x
        java_version: [ 8, 11, 17, 21 ]

        exclude:
          - architecture:
              name: armv7
            java_version: 8
          - architecture:
              name: s390x
            java_version: 8
          - architecture:
              name: riscv64
            java_version: 8
          - architecture:
              name: riscv64
            java_version: 11
    needs: Linux-Build

    name: Linux-${{ matrix.architecture.name }}-Test-JDK${{ matrix.java_version }}
    runs-on: ubuntu-latest

    steps:
      - name: Setup Dependencies
        shell: /usr/bin/bash -vx -e {0}
        run: |
          sudo apt-get update -y
          sudo apt-get install -y apt-file libc6 libc6-${{ matrix.architecture.linux_name }}-cross
          sudo apt-file update
          libfile=$(sudo apt-file list libc6-${{ matrix.architecture.linux_name }}-cross | grep -oP "/(?:.*)/lib/ld-linux(?:.*)")
          libfile2=$(sudo apt-file list libc6-${{ matrix.architecture.linux_name }}-cross | grep -oP "/(?:.*)/lib/ld64(?:.*)")
          sudo cp $libfile /lib/ || sudo cp $libfile2 /lib/

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: ${{ matrix.architecture.qemu_name }}

      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          distribution: ${{ matrix.architecture.java_distro }}
          java-version: ${{ matrix.java_version }}
          architecture: ${{ matrix.architecture.java_name }}
          check-latest: true

      - name: Download build
        uses: actions/download-artifact@v4
        with:
          name: Linux-${{ matrix.architecture.name }}-Build-JDK${{ matrix.java_version }}
          path: .
#          run-id: 9284818738
#          github-token: ${{ secrets.GH_TOKEN }}

      - name: Test
        run: |
          docker build \
            --platform ${{ matrix.architecture.docker_name }} \
            --tag brotli4j-test \
            docker/
          docker run --rm \
            --platform ${{ matrix.architecture.docker_name }} \
            --volume "$JAVA_HOME:/opt/java" \
            brotli4j-test \
            mvn -B -V -ntp --file pom.xml -P release -Dmaven.test.skip=false test